set-option -g default-shell /usr/local/bin/zsh
set-option -g default-command "reattach-to-user-namespace -l zsh"
set -g default-terminal "xterm-256color-italic"
set-option -ga terminal-overrides ",*256col*:Tc"
set -sg escape-time 0
set-option -g base-index 1
setw -g pane-base-index 1
set -g focus-events on
set-window-option -g xterm-keys on
set -g update-environment "KEYBOARD_LAYOUT"

# Source tmuxline
if-shell "[[ $ITERM_PROFILE == 'dark' ]]" "source-file ~/.tmux/tmuxline-dark.conf"
if-shell "[[ $ITERM_PROFILE == 'light' ]]" "source-file ~/.tmux/tmuxline-light.conf"

unbind C-b
set -g prefix C-a
set-option -g renumber-windows on

bind | split-window -h
bind - split-window -v
bind r source-file ~/.tmux.conf \; display "Reloaded!"

# ----------------------
# Mouse mode
# -----------------------

set -g mouse on
# Start copy mode when scrolling up and exit when scrolling down to bottom.
# The "#{mouse_any_flag}" check just sends scrolls to any program running that
# has mouse support (like vim).
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind -n WheelDownPane select-pane -t= \; send-keys -M

# set -g mode-mouse on
# set -g mouse-resize-pane on
# set -g mouse-select-pane on
# set -g mouse-select-window on

# Toggle mouse on
bind m \
    set -g mode-mouse on \;\
    set -g mouse-resize-pane on \;\
    set -g mouse-select-pane on \;\
    set -g mouse-select-window on \;\
    display 'Mouse: ON'

# Toggle mouse off
bind M \
    set -g mode-mouse off \;\
    set -g mouse-resize-pane off \;\
    set -g mouse-select-pane off \;\
    set -g mouse-select-window off \;\
    display 'Mouse: OFF'


#--------------------------------------------------
# Smart pane switching with awareness of vim splits
#--------------------------------------------------
# is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
# bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
# bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
# bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
# bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
# bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"


is_workman='[[ $KEYBOARD_LAYOUT == "workman" ]]'
is_qwerty='[[ $KEYBOARD_LAYOUT == "qwerty" ]]'

if-shell "$is_workman" "unbind h"
if-shell "$is_workman" "unbind j"
if-shell "$is_workman" "unbind k"
if-shell "$is_workman" "unbind l"
if-shell "$is_workman" "bind g select-pane -L"
if-shell "$is_workman" "bind n select-pane -D"
if-shell "$is_workman" "bind e select-pane -U"
if-shell "$is_workman" "bind o select-pane -R"

if-shell "$is_qwerty" "unbind g"
if-shell "$is_qwerty" "unbind n "
if-shell "$is_qwerty" "unbind e "
if-shell "$is_qwerty" "unbind o "
if-shell "$is_qwerty" "bind h select-pane -L "
if-shell "$is_qwerty" "bind j select-pane -D "
if-shell "$is_qwerty" "bind k select-pane -U "
if-shell "$is_qwerty" "bind l select-pane -R"

# bind h select-pane -L
# bind j select-pane -D
# bind k select-pane -U
# bind l select-pane -R
bind \ select-pane -l

# ----------------------
# Copy + Paste
# -----------------------
setw -g mode-keys vi

# Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
unbind -t vi-copy Enter
bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"
