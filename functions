#
# REST 
#
# Performs a GET request to the specified URL and formats the JSON response
get() {
  curl -s -X GET ${1} | jq "." | bat --language json
}

# Performs a POST request to the specified URL with JSON data and formats the response
post() {
  curl -s -X POST "${1}" -H "Content-Type: application/json" -d "${2}" | jq "." | bat --language json
}

# Performs a PUT request to the specified URL with JSON data and formats the response 
put() {
  curl -s -X PUT "${1}" -H "Content-Type: application/json" -d "${2}" | jq "." | bat --language json
}

# Performs a DELETE request to the specified URL and formats the JSON response
delete() {
  curl -s -X DELETE "${1}" | jq "." | bat --language json
}

# Display a truecolor gradient
truecolor() {
  awk 'BEGIN{
      s="/\\/\\/\\/\\/\\"; s=s s s s s s s s;
      for (colnum = 0; colnum<77; colnum++) {
          r = 255-(colnum*255/76);
          g = (colnum*510/76);
          b = (colnum*255/76);
          if (g>255) g = 510-g;
          printf "\033[48;2;%d;%d;%dm", r,g,b;
          printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
          printf "%s\033[0m", substr(s,colnum+1,1);
      }
      printf "\n";
  }'
}

# Search history from previous line
up-line-or-search-prefix () {
  local CURSOR_before_search=$CURSOR
  zle up-line-or-search "$LBUFFER"
  CURSOR=$CURSOR_before_search
}

## Print a horizontal rule
rule () {
  printf "%$(tput cols)s\n"|tr " " "─"
}


# fe [FUZZY PATTERN] - Open the selected file with the default editor
function fe() {
  local file
  file=$(fzf-tmux --query="$1" --select-1 --exit-0)
  [ -n "$file" ] && ${EDITOR:-vim} "$file"
}

# ftpane - switch pane (@george-b)
ftpane() {
  local panes current_window current_pane target target_window target_pane
  panes=$(tmux list-panes -s -F '#I:#P - #{pane_current_path} #{pane_current_command}')
  current_pane=$(tmux display-message -p '#I:#P')
  current_window=$(tmux display-message -p '#I')

  target=$(echo "$panes" | grep -v "$current_pane" | fzf +m --reverse) || return

  target_window=$(echo $target | awk 'BEGIN{FS=":|-"} {print$1}')
  target_pane=$(echo $target | awk 'BEGIN{FS=":|-"} {print$2}' | cut -c 1)

  if [[ $current_window -eq $target_window ]]; then
    tmux select-pane -t ${target_window}.${target_pane}
  else
    tmux select-pane -t ${target_window}.${target_pane} &&
    tmux select-window -t $target_window
  fi
}

# fda - including hidden directories
function fda() {
  local dir
  dir=$(find ${1:-.} -type d 2> /dev/null | fzf-tmux +m) && cd "$dir"
}


# fkill - kill process
function fkill() {
  ps -ef | sed 1d | fzf-tmux -m | awk '{print $2}' | xargs kill -${1:-9}
}


# cdf - cd into the directory of the selected file
function cdf() {
   local file
   local dir
   file=$(fzf-tmux +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
}

# fbr - checkout git branch (including remote branches)
function fco() {
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}


# fshow - git commit browser
function fshow() {
  local out sha q
  while out=$(
      git log --decorate=short --graph --oneline --color=always |
      fzf-tmux --ansi --multi --no-sort --reverse --query="$q" --print-query); do
    q=$(head -1 <<< "$out")
    while read sha; do
      [ -n "$sha" ] && git show --color=always $sha | less -R
    done < <(sed '1d;s/^[^a-z0-9]*//;/^$/d' <<< "$out" | awk '{print $1}')
  done
}

# fstash - easier way to deal with stashes
# type fstash to get a list of your stashes
# enter shows you the contents of the stash
# ctrl-d shows a diff of the stash against your current HEAD
# ctrl-b checks the stash out as a branch, for easier merging
fstash() {
  local out q k sha
  while out=$(
    git stash list --pretty="%C(yellow)%h %>(14)%Cgreen%cr %C(blue)%gs" |
    fzf --ansi --no-sort --query="$q" --print-query \
        --expect=ctrl-d,ctrl-b);
  do
    mapfile -t out <<< "$out"
    q="${out[0]}"
    k="${out[1]}"
    sha="${out[-1]}"
    sha="${sha%% *}"
    [[ -z "$sha" ]] && continue
    if [[ "$k" == 'ctrl-d' ]]; then
      git diff $sha
    elif [[ "$k" == 'ctrl-b' ]]; then
      git stash branch "stash-$sha" $sha
      break;
    else
      git stash show -p $sha
    fi
  done
}


# fs [FUZZY PATTERN] - Select selected tmux session
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
function fs() {
  local session
  session=$(tmux list-sessions -F "#{session_name}" | \
    fzf-tmux --query="$1" --select-1 --exit-0) &&
  tmux switch-client -t "$session"
}

## Set  layout
workman() {
  export KEYBOARD_LAYOUT="workman"
  sed -i "" "1s/.*/export KEYBOARD_LAYOUT='workman'/" ~/.profile
  source ~/.zshrc
  echo "Keyboard layout switched to $KEYBOARD_LAYOUT"
}


## Set qwerty layout
qwerty() {
  export KEYBOARD_LAYOUT="qwerty";
  sed -i "" "1s/.*/export KEYBOARD_LAYOUT='qwerty'/" ~/.profile
  source ~/.zshrc
  echo "Keyboard layout switched to $KEYBOARD_LAYOUT"
}


# 1. Search for text in files using Ripgrep
# 2. Interactively narrow down the list using fzf
# 3. Open the file in Vim
function ripgrep_fzf_vim() {
rg --color=always --line-number --no-heading --smart-case "${*:-}" |
  fzf --ansi \
      --color "hl:yellow,hl+:yellow" \
      --delimiter : \
      --border-label ' Grep 󰐰 ' \
      --reverse \
      --preview 'bat --color=always {1} --highlight-line {2}' \
      --bind 'enter:become(nvim {1} +{2})'
}
zle -N ripgrep_fzf_vim


# Interactive zoxide navigation with automatic command line acceptance
#
# This function:
# 1. Prompts for interactive directory selection using zoxide
# 2. Changes to the selected directory if one is chosen
# 3. Automatically accepts the command line to execute the directory change
#
# Used as a ZLE widget to provide smoother directory navigation workflow
function _zoxide_zi_with_accept() {
  local result="$(zoxide query -i)"
  if [[ -n "$result" ]]; then
    cd "$result"
    zle accept-line
  fi
}
zle -N _zoxide_zi_with_accept
